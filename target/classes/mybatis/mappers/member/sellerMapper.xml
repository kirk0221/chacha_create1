<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.chacha.create.common.mapper.member.SellerMapper">

	<resultMap id="sellerResultMap" type="sellerEntity">
		<id property="sellerId" column="seller_id" />
		<result property="memberId" column="member_id" />
		<result property="openingDate" column="opening_date" />
		<result property="account" column="account" />
		<result property="accountBank" column="account_bank" />
		<result property="profileInfo" column="profile_info" />
	</resultMap>

	<select id="selectAll" resultMap="sellerResultMap">
		SELECT * FROM seller
	</select>

	<select id="selectBySellerId" resultMap="sellerResultMap">
		SELECT * FROM seller
		WHERE seller_id = #{sellerId}
	</select>

	<select id="selectByMemberId" resultMap="sellerResultMap">
		SELECT * FROM seller
		WHERE member_id = #{memberId}
	</select>

	<insert id="insert" parameterType="sellerEntity">
		INSERT INTO seller (
		seller_id, member_id, opening_date, account, account_bank,
		profile_info
		) VALUES (
		seq_seller_id.NEXTVAL, #{memberId},
		#{openingDate}, #{account}, #{accountBank},
		#{profileInfo}
		)
	</insert>

	<update id="update" parameterType="sellerEntity">
		UPDATE seller
		SET member_id =
		#{memberId},
		opening_date = #{openingDate},
		account = #{account},
		account_bank = #{accountBank},
		profile_info = #{profileInfo}
		WHERE
		seller_id = #{sellerId}
	</update>

	<delete id="delete" parameterType="int">
		DELETE FROM seller WHERE
		seller_id = #{sellerId}
	</delete>

	<select id="selectBySellerInfo"
		resultType="com.chacha.create.common.entity.member.SellerInfoDTO"
		parameterType="string">
		SELECT
		m.member_name AS sellerName,
		m.member_phone AS sellerPhone,
		m.member_email AS sellerEmail,
		s.profile_info AS sellerProfile
		FROM store st
		JOIN seller s ON st.seller_id = s.seller_id
		JOIN member m ON s.member_id = m.member_id
		WHERE st.store_url = #{storeUrl}
		</select>

	<select id="sellerAdjustment"
		resultType="com.chacha.create.common.dto.ManagerAdjustmentDTO">
		SELECT
		m.member_name AS
		sellerName,
		s.account AS accountNumber,
		s.account_bank AS accountBank,
		m.member_name AS accountHolder,
		SUM(od.order_cnt * od.order_price) AS
		adjustmentAmount,
		'정산 예정' AS adjustmentStatus,
		TO_CHAR(ADD_MONTHS(TRUNC(oi.order_date, 'MM'), 1), 'YYYY-MM-DD') AS adjustmentDate
		FROM order_info oi
		JOIN
		order_detail od ON oi.order_id = od.order_id
		JOIN product p ON
		od.product_id = p.product_id
		JOIN store st ON p.store_id = st.store_id
		JOIN seller s ON st.seller_id = s.seller_id
		JOIN member m ON
		s.member_id = m.member_id
		WHERE s.personal_check = 0 AND oi.order_date
		>= TRUNC(SYSDATE, 'MM')
		AND oi.order_date &lt;
		ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 1)
		GROUP BY m.member_name, s.account, s.account_bank,
         TO_CHAR(ADD_MONTHS(TRUNC(oi.order_date, 'MM'), 1), 'YYYY-MM-DD')
		ORDER BY adjustmentAmount DESC
	</select>

</mapper>
